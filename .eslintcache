[{"/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/index.js":"1","/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/App.js":"2","/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/ui/Header.js":"3","/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/ui/Theme.js":"4","/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/ui/Footer.js":"5"},{"size":166,"mtime":1610875446473,"results":"6","hashOfConfig":"7"},{"size":1267,"mtime":1610881273554,"results":"8","hashOfConfig":"7"},{"size":9314,"mtime":1610875557038,"results":"9","hashOfConfig":"7"},{"size":628,"mtime":1610176770699,"results":"10","hashOfConfig":"7"},{"size":805,"mtime":1610881650782,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"kf4gpp",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/index.js",[],["24","25"],"/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/App.js",[],"/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/ui/Header.js",["26","27"],"import React, { useState, useEffect } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport ToolBar from \"@material-ui/core/ToolBar\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport logo from \"../../assets/logo.svg\";\n\nfunction ElevationScroll(props) {\n  const { children, window } = props;\n\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n    target: window ? window() : undefined,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nconst useStyles = makeStyles((theme) => ({\n  toolbarMargin: {\n    ...theme.mixins.toolbar,\n    marginBottom: \"3em\",\n    [theme.breakpoints.down(\"md\")]: {\n      marginBottom: \"2em\",\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginBottom: \"1.25em\",\n    },\n  },\n  logo: {\n    height: \"8em\",\n    [theme.breakpoints.down(\"md\")]: {\n      height: \"7em\",\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"5.5em\",\n    },\n  },\n  logoContainer: {\n    padding: 0,\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  tabContainer: {\n    marginLeft: \"auto\",\n  },\n  tab: {\n    ...theme.typography.tab,\n    minWidth: 10,\n    marginLeft: \"25px\",\n  },\n  button: {\n    ...theme.typography.estimate,\n    borderRadius: \"50px\",\n    marginLeft: \"50px\",\n    marginRight: \"25px\",\n    height: \"45px\",\n  },\n  menu: {\n    backgroundColor: theme.palette.common.blue,\n    color: \"white\",\n  },\n  menuItem: {\n    ...theme.typography.tab,\n    opacity: 0.7,\n    \"&:hover\": {\n      opacity: 1,\n    },\n  },\n  drawerIcon: {\n    height: \"50px\",\n    width: \"50px\",\n  },\n  drawerIconContainer: {\n    marginLeft: \"auto\",\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  drawer: {\n    backgroundColor: theme.palette.common.blue,\n  },\n  drawerItem: {\n    ...theme.typography.tab,\n    color: \"white\",\n    opacity: 0.7,\n  },\n  drawerItemEstimate: {\n    backgroundColor: theme.palette.common.orange,\n  },\n  drawerItemSelected: {\n    \"& .MuiListItemText-root\": {\n      opacity: 1,\n    },\n  },\n  appbar: {\n    zIndex: theme.zIndex.modal + 1,\n  }\n}));\n\nexport default function Header(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  const matches = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [value, setValue] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openMenu, setOpenMenu] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  const handleChange = (e, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleClick = (e) => {\n    setAnchorEl(e.currentTarget);\n    setOpenMenu(true);\n  };\n\n  const handleClose = (e) => {\n    setAnchorEl(null);\n    setOpenMenu(false);\n  };\n\n  const handleMenuItemClick = (e, i) => {\n    setAnchorEl(null);\n    setOpenMenu(false);\n    setSelectedIndex(i);\n  };\n  const menuOptions = [\n    { name: \"Services\", link: \"/services\", activeIndex: 1, selectedIndex: 0 },\n    {\n      name: \"Custom Software Development\",\n      link: \"/customsoftware\",\n      activeIndex: 1,\n      selectedIndex: 1,\n    },\n    {\n      name: \"Mobile App Development\",\n      link: \"/mobileapps\",\n      activeIndex: 1,\n      selectedIndex: 2,\n    },\n    {\n      name: \"Website Development\",\n      link: \"/websites\",\n      activeIndex: 1,\n      selectedIndex: 3,\n    },\n  ];\n\n  const routes = [\n    { name: \"Home\", link: \"/\", activeIndex: 0 },\n    {\n      name: \"Services\",\n      link: \"/services\",\n      activeIndex: 1,\n      ariaOwns: anchorEl ? \"simple-menu\" : undefined,\n      ariaPopup: anchorEl ? \"true\" : undefined,\n      mouseOver: (event) => handleClick(event),\n    },\n    {\n      name: \"The Revolution\",\n      link: \"/revolution\",\n      activeIndex: 2,\n    },\n    {\n      name: \"About Us\",\n      link: \"/about\",\n      activeIndex: 3,\n    },\n    {\n      name: \"Contact Us\",\n      link: \"/contact\",\n      activeIndex: 4,\n    },\n  ];\n\n  useEffect(() => {\n    [...menuOptions, ...routes].forEach((route) => {\n      switch (window.location.pathname) {\n        case `${route.link}`:\n          if (value !== route.activeIndex) {\n            setValue(route.activeIndex);\n            if (route.selectedIndex && route.selectedIndex !== selectedIndex) {\n              setSelectedIndex(route.selectedIndex);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  }, [value, menuOptions, selectedIndex, routes]);\n\n  const tabs = (\n    <React.Fragment>\n      <Tabs\n        value={value}\n        className={classes.tabContainer}\n        onChange={handleChange}\n        indicatorColor=\"primary\"\n      >\n        { routes.map((route, index) => (\n          <Tab\n            key={`${route}${index}`}\n            className={classes.tab}\n            component={Link}\n            to={route.link}\n            label={route.name}\n            aria-owns={route.ariaOwns}\n            aira-haspopup={route.ariaPopup}\n            onMouseOver={route.mouseOver}\n          />\n        ))}\n      </Tabs>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button}>\n        Free Estimate\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        open={openMenu}\n        onClose={handleClose}\n        classes={{ paper: classes.menu }}\n        MenuListProps={{ onMouseLeave: handleClose }}\n        elevation={0}\n        keepMounted\n        style={{zIndex: 9999}}\n      >\n        {menuOptions.map((option, i) => (\n          <MenuItem\n            key={`${option}${i}`}\n            component={Link}\n            to={option.link}\n            classes={{ root: classes.menuItem }}\n            onClick={(event) => {\n              handleMenuItemClick(event, i);\n              setValue(1);\n              handleClose();\n            }}\n            selected={i === selectedIndex && value === 1}\n          >\n            {option.name}\n          </MenuItem>\n        ))}\n      </Menu>\n    </React.Fragment>\n  );\n\n  const drawer = (\n    <React.Fragment>\n      <SwipeableDrawer\n        disableBackdropTransition={!iOS}\n        disableDiscovery={iOS}\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n        onOpen={() => setOpenDrawer(true)}\n        classes={{ paper: classes.drawer }}\n      >\n        <div className={classes.toolbarMargin} />\n        <List disablePadding>\n          { routes.map((route, index) => (\n            <ListItem\n              key={`${route}${index}`}\n              divider\n              button\n              component={Link}\n              to={route.link}\n              selected={value === route.activeIndex}\n              classes={{selected: classes.drawerItemSelected}}\n              onClick={() => {\n                setOpenDrawer(false);\n                setValue(route.activeIndex)\n              }}\n            >\n              <ListItemText\n                className={classes.drawerItem}\n                disableTypography>{ route.name }</ListItemText>\n            </ListItem>\n          ))}\n\n          <ListItem\n            divider\n            button\n            component={Link}\n            to=\"/estimate\"\n            classes={{root: classes.drawerItemEstimate, selected: classes.drawerItemSelected}}\n            onClick={() => {\n              setOpenDrawer(false);\n              setValue(5);\n            }}\n            selected={value === 5}\n          >\n            <ListItemText\n              className={classes.drawerItem}\n              disableTypography\n            >\n              Free Estimate\n            </ListItemText>\n          </ListItem>\n        </List>\n      </SwipeableDrawer>\n      <IconButton\n        className={classes.drawerIconContainer}\n        onClick={() => setOpenDrawer(!openDrawer)}\n        disableRipple\n      >\n        <MenuIcon className={classes.drawerIcon} />\n      </IconButton>\n    </React.Fragment>\n  );\n\n  return (\n    <React.Fragment>\n      <ElevationScroll>\n        <AppBar position=\"fixed\" color=\"primary\" className={classes.appbar}>\n          <ToolBar disableGutters>\n            <Button\n              component={Link}\n              to=\"/\"\n              disableRipple\n              className={classes.logoContainer}\n              onClick={() => setValue(0)}\n            >\n              <img alt=\"company logo\" className={classes.logo} src={logo} />\n            </Button>\n            {matches ? drawer : tabs}\n          </ToolBar>\n        </AppBar>\n      </ElevationScroll>\n      <div className={classes.toolbarMargin} />\n    </React.Fragment>\n  );\n}\n","/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/ui/Theme.js",[],"/Users/iamsuthicha/Desktop/developer/Workshop/material-ui-react/src/components/ui/Footer.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":151,"column":9,"nodeType":"34","endLine":171,"endColumn":4},{"ruleId":"32","severity":1,"message":"35","line":173,"column":9,"nodeType":"34","endLine":198,"endColumn":4},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"react-hooks/exhaustive-deps","The 'menuOptions' array makes the dependencies of useEffect Hook (at line 215) change on every render. To fix this, wrap the initialization of 'menuOptions' in its own useMemo() Hook.","VariableDeclarator","The 'routes' array makes the dependencies of useEffect Hook (at line 215) change on every render. To fix this, wrap the initialization of 'routes' in its own useMemo() Hook.","no-global-assign","no-unsafe-negation"]